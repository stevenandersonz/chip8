package main

//big endian start a 512
const start = 0x200 

type  memory struct {
    ram[3584] byte
    reserved[512] byte
}

func (m *memory) LoadMemory (address uint16, value byte) bool {
    if address < start {
        m.reserved[address] = value
    } else {
        m.ram[address - start] = value
    }
    return true
}

func (m *memory) ReadFromMemory (address uint16) byte {
    if address < start {
        return m.reserved[address] 
    } else {
        return m.ram[address - start]
    }
}
func (m *memory) LoadReserved () {
    m.reserved = [512] uint8 {
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80,  // F
    } 
}
func InitMemory() *memory {
    newMem := new(memory)
    newMem.LoadReserved()
    return newMem
}
